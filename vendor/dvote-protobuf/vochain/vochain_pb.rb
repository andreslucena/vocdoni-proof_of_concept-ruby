# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: vochain/vochain.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("vochain/vochain.proto", :syntax => :proto3) do
    add_message "dvote.types.v1.VoteEnvelope" do
      optional :nonce, :bytes, 1
      optional :processId, :bytes, 2
      optional :proof, :message, 3, "dvote.types.v1.Proof"
      optional :votePackage, :bytes, 4
      optional :nullifier, :bytes, 5
      repeated :encryptionKeyIndexes, :uint32, 6
    end
    add_message "dvote.types.v1.Census" do
    end
    add_enum "dvote.types.v1.Census.Type" do
      value :UNKNOWN, 0
      value :ARBO_BLAKE2B, 1
      value :ARBO_POSEIDON, 2
      value :ETHEREUMSTORAGE, 3
      value :ETHEREUMACCOUNT, 4
      value :CA, 5
      value :GRAVITON, 1001
      value :IDEN3, 1002
    end
    add_message "dvote.types.v1.Proof" do
      oneof :payload do
        optional :graviton, :message, 1, "dvote.types.v1.ProofGraviton"
        optional :iden3, :message, 2, "dvote.types.v1.ProofIden3"
        optional :ethereumStorage, :message, 3, "dvote.types.v1.ProofEthereumStorage"
        optional :ethereumAccount, :message, 4, "dvote.types.v1.ProofEthereumAccount"
        optional :ca, :message, 5, "dvote.types.v1.ProofCA"
        optional :arbo, :message, 6, "dvote.types.v1.ProofArbo"
        optional :zkSnark, :message, 7, "dvote.types.v1.ProofZkSNARK"
        optional :minimeStorage, :message, 8, "dvote.types.v1.ProofMinime"
      end
    end
    add_message "dvote.types.v1.ProofGraviton" do
      optional :siblings, :bytes, 1
    end
    add_message "dvote.types.v1.ProofIden3" do
      optional :siblings, :bytes, 1
    end
    add_message "dvote.types.v1.ProofEthereumStorage" do
      optional :key, :bytes, 1
      optional :value, :bytes, 2
      repeated :siblings, :bytes, 3
    end
    add_message "dvote.types.v1.ProofEthereumAccount" do
      optional :nonce, :bytes, 1
      optional :balance, :bytes, 2
      optional :storageHash, :bytes, 3
      optional :codeHash, :bytes, 4
      repeated :siblings, :bytes, 5
    end
    add_message "dvote.types.v1.ProofMinime" do
      optional :proofPrevBlock, :message, 1, "dvote.types.v1.ProofEthereumStorage"
      optional :proofNextBlock, :message, 2, "dvote.types.v1.ProofEthereumStorage"
    end
    add_message "dvote.types.v1.ProofCA" do
      optional :type, :enum, 1, "dvote.types.v1.ProofCA.Type"
      optional :bundle, :message, 2, "dvote.types.v1.CAbundle"
      optional :signature, :bytes, 3
    end
    add_enum "dvote.types.v1.ProofCA.Type" do
      value :UNKNOWN, 0
      value :ECDSA, 1
      value :ECDSA_PIDSALTED, 2
      value :ECDSA_BLIND, 3
      value :ECDSA_BLIND_PIDSALTED, 4
    end
    add_message "dvote.types.v1.CAbundle" do
      optional :processId, :bytes, 1
      optional :address, :bytes, 2
    end
    add_message "dvote.types.v1.ProofArbo" do
      optional :type, :enum, 1, "dvote.types.v1.ProofArbo.Type"
      optional :siblings, :bytes, 2
      optional :value, :bytes, 3
      optional :keyType, :enum, 4, "dvote.types.v1.ProofArbo.KeyType"
    end
    add_enum "dvote.types.v1.ProofArbo.Type" do
      value :BLAKE2B, 0
      value :POSEIDON, 1
    end
    add_enum "dvote.types.v1.ProofArbo.KeyType" do
      value :PUBKEY, 0
      value :ADDRESS, 1
    end
    add_message "dvote.types.v1.ProofZkSNARK" do
      optional :circuitParametersIndex, :int32, 1
      repeated :a, :string, 2
      repeated :b, :string, 3
      repeated :c, :string, 4
      repeated :publicInputs, :string, 5
    end
    add_message "dvote.types.v1.Account" do
      optional :balance, :uint64, 1
      optional :nonce, :uint32, 2
      optional :infoURI, :string, 3
      repeated :delegateAddrs, :bytes, 4
      optional :processIndex, :uint32, 5
    end
    add_message "dvote.types.v1.Treasurer" do
      optional :address, :bytes, 1
      optional :nonce, :uint32, 2
    end
    add_message "dvote.types.v1.Tx" do
      oneof :payload do
        optional :vote, :message, 1, "dvote.types.v1.VoteEnvelope"
        optional :newProcess, :message, 2, "dvote.types.v1.NewProcessTx"
        optional :admin, :message, 3, "dvote.types.v1.AdminTx"
        optional :setProcess, :message, 4, "dvote.types.v1.SetProcessTx"
        optional :registerKey, :message, 5, "dvote.types.v1.RegisterKeyTx"
        optional :mintTokens, :message, 6, "dvote.types.v1.MintTokensTx"
        optional :sendTokens, :message, 7, "dvote.types.v1.SendTokensTx"
        optional :setTransactionCosts, :message, 8, "dvote.types.v1.SetTransactionCostsTx"
        optional :setAccount, :message, 9, "dvote.types.v1.SetAccountTx"
        optional :collectFaucet, :message, 10, "dvote.types.v1.CollectFaucetTx"
        optional :setKeykeeper, :message, 11, "dvote.types.v1.SetKeykeeperTx"
      end
    end
    add_message "dvote.types.v1.SignedTx" do
      optional :tx, :bytes, 1
      proto3_optional :signature, :bytes, 2
    end
    add_message "dvote.types.v1.NewProcessTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      optional :nonce, :uint32, 2
      optional :process, :message, 3, "dvote.types.v1.Process"
    end
    add_message "dvote.types.v1.SetProcessTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      optional :nonce, :uint32, 2
      optional :processId, :bytes, 3
      proto3_optional :status, :enum, 4, "dvote.types.v1.ProcessStatus"
      proto3_optional :questionIndex, :uint32, 5
      proto3_optional :censusRoot, :bytes, 6
      proto3_optional :censusURI, :string, 7
      proto3_optional :proof, :message, 8, "dvote.types.v1.Proof"
      proto3_optional :results, :message, 9, "dvote.types.v1.ProcessResult"
    end
    add_message "dvote.types.v1.AdminTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      optional :processId, :bytes, 2
      proto3_optional :address, :bytes, 3
      proto3_optional :encryptionPrivateKey, :bytes, 5
      proto3_optional :encryptionPublicKey, :bytes, 6
      proto3_optional :keyIndex, :uint32, 7
      proto3_optional :power, :uint64, 8
      proto3_optional :publicKey, :bytes, 9
      optional :nonce, :uint32, 11
    end
    add_message "dvote.types.v1.RegisterKeyTx" do
      optional :nonce, :uint32, 1
      optional :processId, :bytes, 2
      optional :proof, :message, 3, "dvote.types.v1.Proof"
      optional :newKey, :bytes, 4
      optional :weight, :string, 5
    end
    add_message "dvote.types.v1.MintTokensTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      optional :nonce, :uint32, 2
      optional :to, :bytes, 3
      optional :value, :uint64, 4
    end
    add_message "dvote.types.v1.SendTokensTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      optional :nonce, :uint32, 2
      optional :from, :bytes, 3
      optional :to, :bytes, 4
      optional :value, :uint64, 5
    end
    add_message "dvote.types.v1.SetTransactionCostsTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      optional :nonce, :uint32, 2
      optional :value, :uint64, 3
    end
    add_message "dvote.types.v1.SetAccountTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      proto3_optional :nonce, :uint32, 2
      proto3_optional :infoURI, :string, 3
      proto3_optional :account, :bytes, 4
      proto3_optional :faucetPackage, :message, 5, "dvote.types.v1.FaucetPackage"
      repeated :delegates, :bytes, 6
    end
    add_message "dvote.types.v1.CollectFaucetTx" do
      optional :txType, :enum, 1, "dvote.types.v1.TxType"
      optional :faucetPackage, :message, 2, "dvote.types.v1.FaucetPackage"
      optional :nonce, :uint32, 3
    end
    add_message "dvote.types.v1.FaucetPayload" do
      optional :identifier, :uint64, 1
      optional :to, :bytes, 2
      optional :amount, :uint64, 3
    end
    add_message "dvote.types.v1.FaucetPackage" do
      optional :payload, :bytes, 1
      optional :signature, :bytes, 2
    end
    add_message "dvote.types.v1.SetKeykeeperTx" do
      optional :txtype, :enum, 1, "dvote.types.v1.TxType"
      optional :nonce, :uint32, 2
      optional :keykeeper, :bytes, 3
    end
    add_message "dvote.types.v1.Process" do
      optional :processId, :bytes, 1
      optional :entityId, :bytes, 2
      optional :startBlock, :uint32, 3
      optional :blockCount, :uint32, 4
      optional :censusRoot, :bytes, 5
      proto3_optional :censusURI, :string, 6
      repeated :encryptionPrivateKeys, :string, 8
      repeated :encryptionPublicKeys, :string, 9
      proto3_optional :keyIndex, :uint32, 11
      optional :status, :enum, 12, "dvote.types.v1.ProcessStatus"
      proto3_optional :paramsSignature, :bytes, 13
      optional :namespace, :uint32, 14
      optional :envelopeType, :message, 15, "dvote.types.v1.EnvelopeType"
      optional :mode, :message, 16, "dvote.types.v1.ProcessMode"
      proto3_optional :questionIndex, :uint32, 17
      proto3_optional :questionCount, :uint32, 18
      optional :voteOptions, :message, 19, "dvote.types.v1.ProcessVoteOptions"
      optional :censusOrigin, :enum, 20, "dvote.types.v1.CensusOrigin"
      repeated :results, :message, 21, "dvote.types.v1.ProcessResult"
      repeated :resultsSignatures, :bytes, 22
      proto3_optional :ethIndexSlot, :uint32, 23
      proto3_optional :sourceBlockHeight, :uint64, 24
      proto3_optional :owner, :bytes, 25
      proto3_optional :metadata, :string, 26
      optional :sourceNetworkId, :enum, 27, "dvote.types.v1.SourceNetworkId"
      proto3_optional :maxCensusSize, :uint64, 28
      proto3_optional :rollingCensusRoot, :bytes, 29
      proto3_optional :rollingCensusSize, :uint64, 30
      proto3_optional :nullifiersRoot, :bytes, 31
      proto3_optional :sourceNetworkContractAddr, :bytes, 32
      proto3_optional :tokenDecimals, :uint32, 33
    end
    add_message "dvote.types.v1.EnvelopeType" do
      optional :serial, :bool, 1
      optional :anonymous, :bool, 2
      optional :encryptedVotes, :bool, 3
      optional :uniqueValues, :bool, 4
      optional :costFromWeight, :bool, 5
    end
    add_message "dvote.types.v1.ProcessMode" do
      optional :autoStart, :bool, 1
      optional :interruptible, :bool, 2
      optional :dynamicCensus, :bool, 3
      optional :encryptedMetaData, :bool, 4
      optional :preRegister, :bool, 5
    end
    add_message "dvote.types.v1.ProcessVoteOptions" do
      optional :maxCount, :uint32, 1
      optional :maxValue, :uint32, 2
      optional :maxVoteOverwrites, :uint32, 3
      optional :maxTotalCost, :uint32, 4
      optional :costExponent, :uint32, 5
    end
    add_message "dvote.types.v1.OracleList" do
      repeated :oracles, :bytes, 1
    end
    add_message "dvote.types.v1.ValidatorList" do
      repeated :validators, :message, 1, "dvote.types.v1.Validator"
    end
    add_message "dvote.types.v1.Validator" do
      optional :address, :bytes, 1
      optional :pubKey, :bytes, 2
      optional :power, :uint64, 3
      optional :name, :string, 4
    end
    add_message "dvote.types.v1.Vote" do
      optional :height, :uint32, 1
      optional :nullifier, :bytes, 2
      optional :processId, :bytes, 3
      optional :votePackage, :bytes, 4
      repeated :encryptionKeyIndexes, :uint32, 5
      optional :weight, :bytes, 6
    end
    add_message "dvote.types.v1.TendermintHeader" do
      optional :chain_id, :string, 2
      optional :height, :int64, 3
      optional :timestamp, :int64, 4
      optional :blockID, :bytes, 5
      optional :last_commit_hash, :bytes, 6
      optional :data_hash, :bytes, 7
      optional :validators_hash, :bytes, 8
      optional :next_validators_hash, :bytes, 9
      optional :consensus_hash, :bytes, 10
      optional :app_hash, :bytes, 11
      optional :last_results_hash, :bytes, 12
      optional :evidence_hash, :bytes, 13
      optional :proposer_address, :bytes, 14
    end
    add_message "dvote.types.v1.ProcessResult" do
      repeated :votes, :message, 1, "dvote.types.v1.QuestionResult"
      proto3_optional :processId, :bytes, 2
      proto3_optional :entityId, :bytes, 3
      proto3_optional :oracleAddress, :bytes, 4
      proto3_optional :signature, :bytes, 5
    end
    add_message "dvote.types.v1.QuestionResult" do
      repeated :question, :bytes, 1
    end
    add_message "dvote.types.v1.ProcessEndingList" do
      repeated :processList, :bytes, 1
    end
    add_message "dvote.types.v1.StoredKeys" do
      repeated :pids, :bytes, 1
    end
    add_enum "dvote.types.v1.TxType" do
      value :TX_UNKNOWN, 0
      value :NEW_PROCESS, 1
      value :SET_PROCESS_STATUS, 2
      value :SET_PROCESS_CENSUS, 3
      value :SET_PROCESS_QUESTION_INDEX, 4
      value :ADD_PROCESS_KEYS, 5
      value :REVEAL_PROCESS_KEYS, 6
      value :ADD_ORACLE, 7
      value :REMOVE_ORACLE, 8
      value :ADD_VALIDATOR, 9
      value :REMOVE_VALIDATOR, 10
      value :VOTE, 11
      value :SET_PROCESS_RESULTS, 12
      value :REGISTER_VOTER_KEY, 13
      value :MINT_TOKENS, 14
      value :SEND_TOKENS, 15
      value :SET_TRANSACTION_COSTS, 16
      value :SET_ACCOUNT_INFO_URI, 17
      value :ADD_DELEGATE_FOR_ACCOUNT, 18
      value :DEL_DELEGATE_FOR_ACCOUNT, 19
      value :COLLECT_FAUCET, 20
      value :ADD_KEYKEEPER, 21
      value :DELETE_KEYKEEPER, 22
      value :CREATE_ACCOUNT, 23
    end
    add_enum "dvote.types.v1.ProcessStatus" do
      value :PROCESS_UNKNOWN, 0
      value :READY, 1
      value :ENDED, 2
      value :CANCELED, 3
      value :PAUSED, 4
      value :RESULTS, 5
    end
    add_enum "dvote.types.v1.SourceNetworkId" do
      value :UNKNOWN, 0
      value :ETH_MAINNET, 1
      value :ETH_RINKEBY, 2
      value :ETH_GOERLI, 3
      value :POA_XDAI, 4
      value :POA_SOKOL, 5
      value :POLYGON, 6
      value :BSC, 7
      value :ETH_MAINNET_SIGNALING, 8
      value :ETH_RINKEBY_SIGNALING, 9
      value :AVAX_FUJI, 10
      value :AVAX, 11
      value :POLYGON_MUMBAI, 12
      value :OPTIMISM, 13
      value :ARBITRUM, 14
    end
    add_enum "dvote.types.v1.CensusOrigin" do
      value :CENSUS_UNKNOWN, 0
      value :OFF_CHAIN_TREE, 1
      value :OFF_CHAIN_TREE_WEIGHTED, 2
      value :OFF_CHAIN_CA, 3
      value :ERC20, 11
      value :ERC721, 12
      value :ERC1155, 13
      value :ERC777, 14
      value :MINI_ME, 15
    end
  end
end

module Dvote
  module Types
    module V1
      VoteEnvelope = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.VoteEnvelope").msgclass
      Census = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Census").msgclass
      Census::Type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Census.Type").enummodule
      Proof = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Proof").msgclass
      ProofGraviton = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofGraviton").msgclass
      ProofIden3 = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofIden3").msgclass
      ProofEthereumStorage = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofEthereumStorage").msgclass
      ProofEthereumAccount = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofEthereumAccount").msgclass
      ProofMinime = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofMinime").msgclass
      ProofCA = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofCA").msgclass
      ProofCA::Type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofCA.Type").enummodule
      CAbundle = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.CAbundle").msgclass
      ProofArbo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofArbo").msgclass
      ProofArbo::Type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofArbo.Type").enummodule
      ProofArbo::KeyType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofArbo.KeyType").enummodule
      ProofZkSNARK = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProofZkSNARK").msgclass
      Account = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Account").msgclass
      Treasurer = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Treasurer").msgclass
      Tx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Tx").msgclass
      SignedTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.SignedTx").msgclass
      NewProcessTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.NewProcessTx").msgclass
      SetProcessTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.SetProcessTx").msgclass
      AdminTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.AdminTx").msgclass
      RegisterKeyTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.RegisterKeyTx").msgclass
      MintTokensTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.MintTokensTx").msgclass
      SendTokensTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.SendTokensTx").msgclass
      SetTransactionCostsTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.SetTransactionCostsTx").msgclass
      SetAccountTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.SetAccountTx").msgclass
      CollectFaucetTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.CollectFaucetTx").msgclass
      FaucetPayload = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.FaucetPayload").msgclass
      FaucetPackage = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.FaucetPackage").msgclass
      SetKeykeeperTx = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.SetKeykeeperTx").msgclass
      Process = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Process").msgclass
      EnvelopeType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.EnvelopeType").msgclass
      ProcessMode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProcessMode").msgclass
      ProcessVoteOptions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProcessVoteOptions").msgclass
      OracleList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.OracleList").msgclass
      ValidatorList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ValidatorList").msgclass
      Validator = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Validator").msgclass
      Vote = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.Vote").msgclass
      TendermintHeader = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.TendermintHeader").msgclass
      ProcessResult = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProcessResult").msgclass
      QuestionResult = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.QuestionResult").msgclass
      ProcessEndingList = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProcessEndingList").msgclass
      StoredKeys = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.StoredKeys").msgclass
      TxType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.TxType").enummodule
      ProcessStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.ProcessStatus").enummodule
      SourceNetworkId = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.SourceNetworkId").enummodule
      CensusOrigin = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("dvote.types.v1.CensusOrigin").enummodule
    end
  end
end
